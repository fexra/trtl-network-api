d3.json('./data', function(nodes) {


console.log(nodes)
    var node_color = '#1ea038'

    var mymap = L.map("mapid", {
        zoom: 3,
        minZoom: 2,
        maxZoom: 4
    }).setView([0, 0], 1),
    southWest = L.latLng(-700, -200),
    northEast = L.latLng(700, 200);
    
    bounds = L.latLngBounds(southWest, northEast), mymap.setMaxBounds(bounds), d3.json("./data/world_map.json", function(a, b) {

        function g() {
            for (var a = f.length - 1; a >= 0; a--) f[a].isEnd() ? f[a].isCleaning || (f[a].isCleaning = !0, f[a].delete(), f.splice(a, 1)) : (f[a].update(), f[a].render())
        }
    
        console.log(b);
    
        var c = topojson.feature(b, b.objects.countries);
    
        L.geoJSON(c, {
            style: {
                color: "#5c8700",
                opacity: .5,
                weight: 1,
                fillColor: "black",
                fillOpacity: .2
            }
        }).addTo(mymap);
        
        var d = d3.select("#mapid").select("svg")
        var f = (d.append("g"), [])
    
        mymap.on("zoomend", g), setInterval(function() {
            
            if (f.length < 100 && Math.random() < .2) {

                f.push(new Flight(mymap, d));
                
                var a = nodes[Math.floor(Math.random() * nodes.length)],
                    b = nodes[Math.floor(Math.random() * nodes.length)]

                var nodeA = nodes.filter(x => x.id === a.id)
                var nodeB = nodes.filter(x => x.id === a.id)

                
                console.log(a.id + " " + b.id)
                
                f[f.length - 1].setPlaneColor(node_color),
                f[f.length - 1].setRoadColor(node_color),
                f[f.length - 1].setBeginColor(node_color),
                f[f.length - 1].setEndColor(node_color),
                f[f.length - 1].init({
                    lat: +nodeA[0].coordinates[0],
                    lng: +nodeA[0].coordinates[1]
                }, {
                    lat: +nodeB[0].coordinates[0],
                    lng: +nodeB[0].coordinates[1]
                })
            }
            g()
        }, 30)
    })
})
